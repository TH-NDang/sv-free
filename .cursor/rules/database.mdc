---
description: 
globs: 
alwaysApply: true
---
# Database Guidelines

## Schema Definition

Define schemas in the `lib/db/schema` directory following Drizzle ORM conventions.

```typescript
// lib/db/schema/documents.ts
import { relations } from "drizzle-orm";
import { pgTable, uuid, varchar, text, timestamp } from "drizzle-orm/pg-core";

export const categories = pgTable("categories", {
  id: uuid("id").defaultRandom().primaryKey(),
  name: varchar("name", { length: 100 }).notNull(),
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const documents = pgTable("documents", {
  id: uuid("id").defaultRandom().primaryKey(),
  title: varchar("title", { length: 255 }).notNull(),
  description: text("description"),
  fileUrl: text("file_url").notNull(),
  categoryId: uuid("category_id").references(() => categories.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Define relationships
export const categoriesRelations = relations(categories, ({ many }) => ({
  documents: many(documents),
}));

export const documentsRelations = relations(documents, ({ one }) => ({
  category: one(categories, {
    fields: [documents.categoryId],
    references: [categories.id],
  }),
}));
```

## Database Connection

Configure the database connection in `lib/db/index.ts`:

```typescript
// lib/db/index.ts
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import { env } from "@/env.mjs";

// Create connection
const connectionString = env.DATABASE_URL;
const client = postgres(connectionString);
export const db = drizzle(client);
```

## Query Functions

Create reusable query functions in `lib/db/queries` directory:

```typescript
// lib/db/queries/documents.ts
import { db } from "@/lib/db";
import { eq, like, desc } from "drizzle-orm";
import { documents, categories } from "@/lib/db/schema/documents";

export async function getDocuments({
  categoryId,
  searchTerm,
  limit = 10,
  offset = 0,
}: {
  categoryId?: string;
  searchTerm?: string;
  limit?: number;
  offset?: number;
}) {
  try {
    let query = db
      .select()
      .from(documents)
      .leftJoin(categories, eq(documents.categoryId, categories.id))
      .orderBy(desc(documents.createdAt))
      .limit(limit)
      .offset(offset);

    if (categoryId) {
      query = query.where(eq(documents.categoryId, categoryId));
    }

    if (searchTerm) {
      query = query.where(like(documents.title, `%${searchTerm}%`));
    }

    return await query;
  } catch (error) {
    console.error("Error fetching documents:", error);
    throw new Error("Failed to fetch documents");
  }
}

export async function getDocumentById(id: string) {
  try {
    const result = await db
      .select()
      .from(documents)
      .where(eq(documents.id, id))
      .leftJoin(categories, eq(documents.categoryId, categories.id))
      .limit(1);

    return result[0] || null;
  } catch (error) {
    console.error(`Error fetching document with ID ${id}:`, error);
    throw new Error("Failed to fetch document");
  }
}
```

## API Integration

Use database queries in API routes:

```typescript
// app/api/documents/route.ts
import { NextResponse } from "next/server";
import { z } from "zod";
import { getDocuments } from "@/lib/db/queries/documents";

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const categoryId = searchParams.get("categoryId") || undefined;
  const search = searchParams.get("search") || undefined;

  try {
    const documents = await getDocuments({
      categoryId,
      searchTerm: search,
    });

    return NextResponse.json(documents);
  } catch (error) {
    console.error("Error fetching documents:", error);
    return NextResponse.json(
      { error: "Failed to fetch documents" },
      { status: 500 }
    );
  }
}
```

## Migrations

Use Drizzle Kit for database migrations:

```bash
# Generate migrations based on schema changes
pnpm db:generate

# Apply migrations to database
pnpm db:push

# Open Drizzle Studio to visualize database
pnpm db:studio
```

## Environment Variables

Store database connection credentials securely in environment variables:

```
# .env
DATABASE_URL=postgres://username:password@localhost:5432/database

# .env.example (template without sensitive data)
DATABASE_URL=postgres://username:password@localhost:5432/database
```

## Error Handling

- Always use try/catch blocks for database operations
- Log errors with enough context for debugging
- Return appropriate error responses to the client
- Use Zod for input validation before database operations
