// ƒê·∫£m b·∫£o n·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env tr∆∞·ªõc khi import c√°c module kh√°c
import { config } from "dotenv";
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import { v4 as uuidv4 } from "uuid";
import { categories } from "./schema";
import { createClient } from "@supabase/supabase-js";

// ==========================================
// Thi·∫øt l·∫≠p k·∫øt n·ªëi database ri√™ng cho seed
// ==========================================
config({
  path: ".env",
});

const DATABASE_URL = process.env.DATABASE_URL;
if (!DATABASE_URL) {
  throw new Error(
    "DATABASE_URL kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong bi·∫øn m√¥i tr∆∞·ªùng. Vui l√≤ng ki·ªÉm tra file .env"
  );
}

const client = postgres(DATABASE_URL);
const db = drizzle(client);

/**
 * Danh s√°ch danh m·ª•c c·ªë ƒë·ªãnh ƒë·ªÉ seed
 */
const CATEGORIES = [
  {
    id: uuidv4(),
    name: "C√¥ng ngh·ªá th√¥ng tin",
    slug: "cong-nghe-thong-tin",
    description: "T√†i li·ªáu v·ªÅ l·∫≠p tr√¨nh, ph√°t tri·ªÉn ph·∫ßn m·ªÅm, c√¥ng ngh·ªá m·ªõi",
  },
  {
    id: uuidv4(),
    name: "Kinh t·∫ø",
    slug: "kinh-te",
    description: "T√†i li·ªáu v·ªÅ kinh t·∫ø, t√†i ch√≠nh, kinh doanh, marketing",
  },
  {
    id: uuidv4(),
    name: "K·ªπ thu·∫≠t",
    slug: "ky-thuat",
    description: "T√†i li·ªáu v·ªÅ ƒëi·ªán t·ª≠, c∆° kh√≠, x√¢y d·ª±ng v√† c√°c ng√†nh k·ªπ thu·∫≠t",
  },
  {
    id: uuidv4(),
    name: "Khoa h·ªçc t·ª± nhi√™n",
    slug: "khoa-hoc-tu-nhien",
    description:
      "To√°n h·ªçc, V·∫≠t l√Ω, H√≥a h·ªçc, Sinh h·ªçc v√† c√°c ng√†nh khoa h·ªçc t·ª± nhi√™n",
  },
  {
    id: uuidv4(),
    name: "Khoa h·ªçc x√£ h·ªôi",
    slug: "khoa-hoc-xa-hoi",
    description:
      "T√¢m l√Ω h·ªçc, L·ªãch s·ª≠, VƒÉn h·ªçc, Ng√¥n ng·ªØ v√† c√°c ng√†nh khoa h·ªçc x√£ h·ªôi",
  },
  {
    id: uuidv4(),
    name: "Y h·ªçc",
    slug: "y-hoc",
    description: "T√†i li·ªáu v·ªÅ y h·ªçc, d∆∞·ª£c ph·∫©m, s·ª©c kh·ªèe v√† y t·∫ø",
  },
  {
    id: uuidv4(),
    name: "N√¥ng nghi·ªáp",
    slug: "nong-nghiep",
    description: "T√†i li·ªáu v·ªÅ n√¥ng nghi·ªáp, chƒÉn nu√¥i, tr·ªìng tr·ªçt, th·ªßy s·∫£n",
  },
  {
    id: uuidv4(),
    name: "Gi√°o d·ª•c",
    slug: "giao-duc",
    description: "T√†i li·ªáu v·ªÅ gi√°o d·ª•c, ƒë√†o t·∫°o, ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y",
  },
  {
    id: uuidv4(),
    name: "Lu·∫≠t",
    slug: "luat",
    description: "T√†i li·ªáu v·ªÅ lu·∫≠t, ph√°p lu·∫≠t, quy ƒë·ªãnh ph√°p l√Ω",
  },
];

/**
 * Th√™m d·ªØ li·ªáu danh m·ª•c v√†o database
 */
export async function seedCategories() {
  console.log("üå± Seeding categories...");

  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ categories ch∆∞a
    const existingCategories = await db.select().from(categories);

    if (existingCategories.length > 0) {
      console.log(
        `Found ${existingCategories.length} existing categories. Skipping seed.`
      );
      return existingCategories;
    }

    // Th√™m d·ªØ li·ªáu v√†o b·∫£ng categories
    const result = await db.insert(categories).values(CATEGORIES).returning();

    console.log(`‚úÖ Successfully seeded ${result.length} categories`);
    return result;
  } catch (error) {
    console.error("‚ùå Error seeding categories:", error);
    throw error;
  }
}

/**
 * Ki·ªÉm tra v√† t·∫°o buckets tr√™n Supabase Storage n·∫øu ch∆∞a t·ªìn t·∫°i
 */
export async function seedBucketSupabase() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
  console.log("üå± Setting up Supabase storage buckets...");

  try {
    const { data: buckets, error } = await supabase.storage.listBuckets();

    if (error) {
      throw new Error(`Error listing buckets: ${error.message}`);
    }

    const requiredBuckets = ["documents", "thumbnails"];
    const existingBucketNames = buckets?.map((bucket) => bucket.name) || [];

    // Ki·ªÉm tra nh·ªØng bucket n√†o ch∆∞a t·ªìn t·∫°i v√† c·∫ßn t·∫°o
    const bucketsToCreate = requiredBuckets.filter(
      (bucketName) => !existingBucketNames.includes(bucketName)
    );

    if (bucketsToCreate.length === 0) {
      console.log("‚úÖ All required storage buckets already exist");
      return;
    }

    // T·∫°o c√°c bucket c√≤n thi·∫øu
    for (const bucketName of bucketsToCreate) {
      console.log(`Creating bucket: ${bucketName}`);
      const { error: createError } = await supabase.storage.createBucket(
        bucketName,
        {
          public: true,
        }
      );

      if (createError) {
        throw new Error(
          `Error creating bucket ${bucketName}: ${createError.message}`
        );
      }
    }

    console.log(`‚úÖ Successfully created ${bucketsToCreate.length} buckets`);
  } catch (error) {
    console.error("‚ùå Error setting up Supabase buckets:", error);
    throw error;
  }
}

async function main() {
  try {
    console.log("üîç Ki·ªÉm tra k·∫øt n·ªëi database...");

    await seedCategories();
    await seedBucketSupabase();

    console.log("üéâ Seed completed successfully!");
  } catch (error) {
    console.error("‚ùå Seed failed:", error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi tr∆∞·ªõc khi tho√°t
    await client.end();
    process.exit(0);
  }
}

// Ch·∫°y seed n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp (kh√¥ng ph·∫£i import)
if (require.main === module) {
  main();
}
